// Copyright CERN and copyright holders of ALICE O2. This software is
// distributed under the terms of the GNU General Public License v3 (GPL
// Version 3), copied verbatim in the file "COPYING".
//
// See http://alice-o2.web.cern.ch/license for full licensing information.
//
// In applying this license CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

#define BOOST_TEST_MODULE Test MCHRaw GBTDecoder
#define BOOST_TEST_MAIN
#define BOOST_TEST_DYN_LINK

#include <boost/test/unit_test.hpp>
#include "MCHRaw/GBTDecoder.h"
#include "MCHRaw/GBTEncoder.h"
#include <array>
#include <fmt/format.h>
#include "MCHRaw/GBT.h"

extern std::array<uint32_t, 664> REF_BUFFER;

using namespace o2::mch::raw;

SampaChannelHandler handlePacket(std::string_view msg)
{
  return [msg](uint8_t chip, uint8_t channel, uint16_t timestamp,
               uint32_t chargeSum) {
    std::cout << msg << ": Decoder callback got: chip= " << (int)chip << " ch= " << (int)channel << " ts=" << (int)timestamp << " q=" << (int)chargeSum
              << "\n";
  };
}

SampaChannelHandler handlePacketCompact(std::vector<std::string>& result)
{
  return [&result](uint8_t chip, uint8_t channel, uint16_t timestamp,
                   uint32_t chargeSum) {
    result.emplace_back(fmt::format("chip-{}-ch-{}-ts-{}-q-{}", chip, channel, timestamp, chargeSum));
  };
}

BOOST_AUTO_TEST_SUITE(o2_mch_raw)

BOOST_AUTO_TEST_SUITE(gbtdecoder)

BOOST_AUTO_TEST_CASE(GBTDecoderLinkIdMustBeBetween0And23)
{
  BOOST_CHECK_THROW(GBTDecoder enc(24, handlePacket("dummy")), std::invalid_argument);
  BOOST_CHECK_NO_THROW(GBTDecoder enc(23, handlePacket("dummy")));
}

BOOST_AUTO_TEST_CASE(GBTDecoderFromKnownEncoder)
{
  GBTEncoder enc(0);
  uint32_t bx(0);
  uint16_t ts(12);
  int elinkId = 0;
  enc.addChannelChargeSum(bx, elinkId, ts, 0, 10);
  enc.addChannelChargeSum(bx, elinkId, ts, 31, 160);
  elinkId = 3;
  enc.addChannelChargeSum(bx, elinkId, ts, 3, 13);
  enc.addChannelChargeSum(bx, elinkId, ts, 31, 133);
  enc.addChannelChargeSum(bx, elinkId, ts, 13, 163);
  BOOST_CHECK_THROW(enc.addChannelChargeSum(bx, 40, ts, 0, 10), std::invalid_argument);
  int expectedSize = enc.len() / 2;
  enc.finalize();
  BOOST_CHECK_EQUAL(enc.size(), expectedSize); // nof gbt words

  std::vector<std::string> result;
  GBTDecoder dec(0, handlePacketCompact(result));
  for (auto i = 0; i < enc.size(); i++) {
    dec.append(enc.getWord(i));
  }
  dec.finalize();
  std::vector<std::string> expected{
    "chip-3-ch-13-ts-12-q-163",
    "chip-3-ch-31-ts-12-q-133",
    "chip-3-ch-3-ts-12-q-13",
    "chip-0-ch-31-ts-12-q-160",
    "chip-0-ch-0-ts-12-q-10"};
  BOOST_CHECK_EQUAL(result.size(), expected.size());
  BOOST_CHECK(std::is_permutation(begin(result), end(result), begin(expected)));

  std::vector<uint32_t> words;
  enc.toBuffer(words);

  BOOST_CHECK(std::equal(begin(words), end(words), begin(REF_BUFFER)));
}

BOOST_AUTO_TEST_CASE(GBTDecoderWithAdditionAfterFinalize)
{
  bool verboseEncoder(false);
  GBTEncoder enc(0);
  uint32_t bx(0);
  uint16_t ts(0);
  int elinkId = 2;
  enc.addChannelChargeSum(bx, elinkId, ts, 1, 10);
  if (verboseEncoder) {
    std::cout << "before 1st finalize\n";
    enc.printStatus(5);
  }
  enc.finalize();
  if (verboseEncoder) {
    std::cout << "after 1st finalize\n";
    enc.printStatus(5);
  }
  enc.addChannelChargeSum(bx, elinkId, ts, 2, 20);
  elinkId = 4;
  enc.addChannelChargeSum(bx, elinkId, ts, 4, 40);
  enc.addChannelChargeSum(bx, elinkId, ts, 5, 50);
  if (verboseEncoder) {
    std::cout << "before 2nd finalize\n";
    enc.printStatus(5);
  }
  enc.finalize();
  if (verboseEncoder) {
    std::cout << "after 2nd finalize\n";
    enc.printStatus(5);
  }
  bool verboseDecoder(false);

  std::vector<std::string> result;
  GBTDecoder dec(0, handlePacketCompact(result));
  for (auto i = 0; i < enc.size(); i++) {
    dec.append(enc.getWord(i));
  }
  dec.finalize();
  if (verboseDecoder) {
    dec.printStatus(5);
  }
  std::vector<std::string> expected{
    "chip-2-ch-1-ts-0-q-10",
    "chip-2-ch-2-ts-0-q-20",
    "chip-4-ch-4-ts-0-q-40",
    "chip-4-ch-5-ts-0-q-50"};
  BOOST_CHECK_EQUAL(result.size(), expected.size());
  BOOST_CHECK(std::is_permutation(begin(result), end(result), begin(expected)));
}

BOOST_AUTO_TEST_CASE(GBTDecoderFromBuffer)
{
  std::vector<std::string> result;
  GBTDecoder dec(0, handlePacketCompact(result));
  for (auto i = 0; i < REF_BUFFER.size(); i += 4) {
    uint32_t w0 = REF_BUFFER[i];
    uint32_t w1 = REF_BUFFER[i + 1];
    uint32_t w2 = REF_BUFFER[i + 2];
    uint32_t w3 = REF_BUFFER[i + 3];
    dec.append(w0, w1, w2, w3);
  }
  dec.finalize();
  std::vector<std::string> expected{
    "chip-3-ch-13-ts-12-q-163",
    "chip-3-ch-31-ts-12-q-133",
    "chip-3-ch-3-ts-12-q-13",
    "chip-0-ch-31-ts-12-q-160",
    "chip-0-ch-0-ts-12-q-10"};
  BOOST_CHECK_EQUAL(result.size(), expected.size());
  BOOST_CHECK(std::is_permutation(begin(result), end(result), begin(expected)));
}

BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()

std::array<uint32_t, 664> REF_BUFFER = {
  0x5d0dc767,
  0x7c364eb8,
  0x0000db1c,
  0x00000000,
  0x08d74dbc,
  0x43f326ce,
  0x0000108e,
  0x00000000,
  0x36efda54,
  0x10f6ddec,
  0x00004927,
  0x00000000,
  0xcc7e28aa,
  0xcb71e9fb,
  0x0000f97f,
  0x00000000,
  0x27a77eb1,
  0x5fa2c54c,
  0x00001cc6,
  0x00000000,
  0x582400da,
  0xc42368bd,
  0x0000c79b,
  0x00000000,
  0x31b95cf0,
  0x0b858280,
  0x0000f053,
  0x00000000,
  0x68040042,
  0x41060bd5,
  0x00004da9,
  0x00000000,
  0x21dd1490,
  0x0b0c81f0,
  0x000098e2,
  0x00000000,
  0x30400000,
  0x40360204,
  0x00000d30,
  0x00000000,
  0x00940690,
  0x31080050,
  0x00009042,
  0x00000000,
  0x10000308,
  0x30102200,
  0x00000410,
  0x00000000,
  0x0084c10c,
  0x01883050,
  0x00000040,
  0x00000000,
  0xd800c006,
  0x00d01803,
  0x00000418,
  0x00000000,
  0xcf033003,
  0x08408c03,
  0x0000000c,
  0x00000000,
  0x07033201,
  0xdc02c40c,
  0x00000304,
  0x00000000,
  0x00300eb8,
  0xd403600c,
  0x0000b302,
  0x00000000,
  0x00304ef8,
  0x10812200,
  0x0000f003,
  0x00000000,
  0x488c424a,
  0x13882bf1,
  0x000040c9,
  0x00000000,
  0x79cd520a,
  0x1bbca9f1,
  0x00000cf8,
  0x00000000,
  0x7941520a,
  0x58b6a805,
  0x00000d38,
  0x00000000,
  0x4911569a,
  0x5882a805,
  0x0000910a,
  0x00000000,
  0x4911569a,
  0x5882aa05,
  0x0000910a,
  0x00000000,
  0x4995569a,
  0x598aaa55,
  0x0000914a,
  0x00000000,
  0x5995569a,
  0x599aaa55,
  0x0000955a,
  0x00000000,
  0x5995569a,
  0x799aaa55,
  0x0000955a,
  0x00000000,
  0x5995559a,
  0x499aaa55,
  0x0000955a,
  0x00000000,
  0x5995d696,
  0x599a9a55,
  0x0000955a,
  0x00000000,
  0xd9951498,
  0x495aaa57,
  0x0000955a,
  0x00000000,
  0x17977690,
  0x599a8654,
  0x00009556,
  0x00000000,
  0x58940498,
  0xc51a6a5d,
  0x0000975a,
  0x00000000,
  0x11b55c30,
  0x09998250,
  0x0000b452,
  0x00000000,
  0x58840000,
  0x411a0a55,
  0x00004559,
  0x00000000,
  0x119d1411,
  0x0b1881f0,
  0x000094d2,
  0x00000000,
  0x30400002,
  0x40360204,
  0x00000d30,
  0x00000000,
  0x00940610,
  0x31080050,
  0x00009042,
  0x00000000,
  0x10000348,
  0x30102200,
  0x00000410,
  0x00000000,
  0x0084c18c,
  0x01883050,
  0x00000040,
  0x00000000,
  0xd800c004,
  0x00d01803,
  0x00000418,
  0x00000000,
  0xcf033000,
  0x08408c03,
  0x0000000c,
  0x00000000,
  0x07033200,
  0xdc02c40c,
  0x00000304,
  0x00000000,
  0x00300eb8,
  0xd403600c,
  0x0000b302,
  0x00000000,
  0x00304e78,
  0x10812200,
  0x0000f003,
  0x00000000,
  0x488c4288,
  0x13882bf1,
  0x000040c9,
  0x00000000,
  0x79cd5248,
  0x1bbca9f1,
  0x00000cf8,
  0x00000000,
  0x79415208,
  0x58b6a805,
  0x00000d38,
  0x00000000,
  0x49115618,
  0x5882a805,
  0x0000910a,
  0x00000000,
  0x49115618,
  0x5882aa05,
  0x0000910a,
  0x00000000,
  0x49955618,
  0x598aaa55,
  0x0000914a,
  0x00000000,
  0x59955618,
  0x599aaa55,
  0x0000955a,
  0x00000000,
  0x59955618,
  0x799aaa55,
  0x0000955a,
  0x00000000,
  0x59955518,
  0x499aaa55,
  0x0000955a,
  0x00000000,
  0x5995d614,
  0x599a9a55,
  0x0000955a,
  0x00000000,
  0xd995141a,
  0x495aaa57,
  0x0000955a,
  0x00000000,
  0x17977610,
  0x599a8654,
  0x00009556,
  0x00000000,
  0x58940418,
  0xc51a6a5d,
  0x0000975a,
  0x00000000,
  0x11b55cb0,
  0x09998250,
  0x0000b452,
  0x00000000,
  0x58840000,
  0x411a0a55,
  0x00004559,
  0x00000000,
  0x119d1410,
  0x0b1881f0,
  0x000094d2,
  0x00000000,
  0x30400002,
  0x40360204,
  0x00000d30,
  0x00000000,
  0x00940611,
  0x31080050,
  0x00009042,
  0x00000000,
  0x10000308,
  0x30102200,
  0x00000410,
  0x00000000,
  0x0084c18c,
  0x01883050,
  0x00000040,
  0x00000000,
  0xd800c044,
  0x00d01803,
  0x00000418,
  0x00000000,
  0xcf033001,
  0x08408c03,
  0x0000000c,
  0x00000000,
  0x07033201,
  0xdc02c40c,
  0x00000304,
  0x00000000,
  0x00300eb8,
  0xd403600c,
  0x0000b302,
  0x00000000,
  0x00304eb8,
  0x10812200,
  0x0000f003,
  0x00000000,
  0x488c4248,
  0x13882bf1,
  0x000040c9,
  0x00000000,
  0x79cd5208,
  0x1bbca9f1,
  0x00000cf8,
  0x00000000,
  0x79415208,
  0x58b6a805,
  0x00000d38,
  0x00000000,
  0x49115618,
  0x5882a805,
  0x0000910a,
  0x00000000,
  0x49115618,
  0x5882aa05,
  0x0000910a,
  0x00000000,
  0x49955618,
  0x598aaa55,
  0x0000914a,
  0x00000000,
  0x59955618,
  0x599aaa55,
  0x0000955a,
  0x00000000,
  0x59955618,
  0x799aaa55,
  0x0000955a,
  0x00000000,
  0x59955518,
  0x499aaa55,
  0x0000955a,
  0x00000000,
  0x5995d614,
  0x599a9a55,
  0x0000955a,
  0x00000000,
  0xd9951419,
  0x495aaa57,
  0x0000955a,
  0x00000000,
  0x17977612,
  0x599a8654,
  0x00009556,
  0x00000000,
  0x58940418,
  0xc51a6a5d,
  0x0000975a,
  0x00000000,
  0x11b55c70,
  0x09998250,
  0x0000b452,
  0x00000000,
  0x58840080,
  0x411a0a55,
  0x00004559,
  0x00000000,
  0x119d1410,
  0x0b1881f0,
  0x000094d2,
  0x00000000,
  0x30400000,
  0x40360204,
  0x00000d30,
  0x00000000,
  0x00940612,
  0x31080050,
  0x00009042,
  0x00000000,
  0x1000038b,
  0x30102200,
  0x00000410,
  0x00000000,
  0x0084c14f,
  0x01883050,
  0x00000040,
  0x00000000,
  0xd800c084,
  0x00d01803,
  0x00000418,
  0x00000000,
  0xcf0330c0,
  0x08408c03,
  0x0000000c,
  0x00000000,
  0x070332c0,
  0xdc02c40c,
  0x00000304,
  0x00000000,
  0x00300e38,
  0xd403600c,
  0x0000b302,
  0x00000000,
  0x00304e38,
  0x10812200,
  0x0000f003,
  0x00000000,
  0x488c4208,
  0x13882bf1,
  0x000040c9,
  0x00000000,
  0x79cd5208,
  0x1bbca9f1,
  0x00000cf8,
  0x00000000,
  0x79415208,
  0x58b6a805,
  0x00000d38,
  0x00000000,
  0x49115618,
  0x5882a805,
  0x0000910a,
  0x00000000,
  0x49115618,
  0x5882aa05,
  0x0000910a,
  0x00000000,
  0x4995561a,
  0x598aaa55,
  0x0000914a,
  0x00000000,
  0x59955618,
  0x599aaa55,
  0x0000955a,
  0x00000000,
  0x59955618,
  0x799aaa55,
  0x0000955a,
  0x00000000,
  0x59955598,
  0x499aaa55,
  0x0000955a,
  0x00000000,
  0x5995d614,
  0x599a9a55,
  0x0000955a,
  0x00000000,
  0xd9951418,
  0x495aaa57,
  0x0000955a,
  0x00000000,
  0x17977612,
  0x599a8654,
  0x00009556,
  0x00000000,
  0x58940419,
  0xc51a6a5d,
  0x0000975a,
  0x00000000,
  0x11b55c30,
  0x09998250,
  0x0000b452,
  0x00000000,
  0x58840080,
  0x411a0a55,
  0x00004559,
  0x00000000,
  0x119d1450,
  0x0b1881f0,
  0x000094d2,
  0x00000000,
  0x30400000,
  0x40360204,
  0x00000d30,
  0x00000000,
  0x00940610,
  0x31080050,
  0x00009042,
  0x00000000,
  0x10000389,
  0x30102200,
  0x00000410,
  0x00000000,
  0x0084c18d,
  0x01883050,
  0x00000040,
  0x00000000,
  0xd800c004,
  0x00d01803,
  0x00000418,
  0x00000000,
  0xcf033000,
  0x08408c03,
  0x0000000c,
  0x00000000,
  0x07033240,
  0xdc02c40c,
  0x00000304,
  0x00000000,
  0x00300e38,
  0xd403600c,
  0x0000b302,
  0x00000000,
  0x00304e38,
  0x10812200,
  0x0000f003,
  0x00000000,
  0x488c420a,
  0x13882bf1,
  0x000040c9,
  0x00000000,
  0x79cd5209,
  0x1bbca9f1,
  0x00000cf8,
  0x00000000,
  0x7941520a,
  0x58b6a805,
  0x00000d38,
  0x00000000,
  0x49115618,
  0x5882a805,
  0x0000910a,
  0x00000000,
  0x4911561a,
  0x5882aa05,
  0x0000910a,
  0x00000000,
  0x49955618,
  0x598aaa55,
  0x0000914a,
  0x00000000,
  0x59955618,
  0x599aaa55,
  0x0000955a,
  0x00000000,
  0x59955618,
  0x799aaa55,
  0x0000955a,
  0x00000000,
  0x59955558,
  0x499aaa55,
  0x0000955a,
  0x00000000,
  0x5995d694,
  0x599a9a55,
  0x0000955a,
  0x00000000,
  0xd995141a,
  0x495aaa57,
  0x0000955a,
  0x00000000,
  0x17977613,
  0x599a8654,
  0x00009556,
  0x00000000,
  0x58940419,
  0xc51a6a5d,
  0x0000975a,
  0x00000000,
  0x11b55cb0,
  0x09998250,
  0x0000b452,
  0x00000000,
  0x58840040,
  0x411a0a55,
  0x00004559,
  0x00000000,
  0x119d1492,
  0x0b1881f0,
  0x000094d2,
  0x00000000,
  0x30400082,
  0x40360204,
  0x00000d30,
  0x00000000,
  0x00940652,
  0x31080050,
  0x00009042,
  0x00000000,
  0x1000030a,
  0x30102200,
  0x00000410,
  0x00000000,
  0x0084c10e,
  0x01883050,
  0x00000040,
  0x00000000,
  0xd800c006,
  0x00d01803,
  0x00000418,
  0x00000000,
  0xcf033002,
  0x08408c03,
  0x0000000c,
  0x00000000,
  0x07033202,
  0xdc02c40c,
  0x00000304,
  0x00000000,
  0x00300e3a,
  0xd403600c,
  0x0000b302,
  0x00000000,
  0x00304e3a,
  0x10812200,
  0x0000f003,
  0x00000000,
  0x488c420a,
  0x13882bf1,
  0x000040c9,
  0x00000000,
  0x79cd5209,
  0x1bbca9f1,
  0x00000cf8,
  0x00000000,
  0x7941520a,
  0x58b6a805,
  0x00000d38,
  0x00000000,
  0x49115698,
  0x5882a805,
  0x0000910a,
  0x00000000,
  0x4911561a,
  0x5882aa05,
  0x0000910a,
  0x00000000,
  0x49955618,
  0x598aaa55,
  0x0000914a,
  0x00000000,
  0x59955618,
  0x599aaa55,
  0x0000955a,
  0x00000000,
  0x59955618,
  0x799aaa55,
  0x0000955a,
  0x00000000,
  0x59955518,
  0x499aaa55,
  0x0000955a,
  0x00000000,
  0x5995d694,
  0x599a9a55,
  0x0000955a,
  0x00000000,
  0xd995145a,
  0x495aaa57,
  0x0000955a,
  0x00000000,
  0x17977613,
  0x599a8654,
  0x00009556,
  0x00000000,
  0x58940419,
  0xc51a6a5d,
  0x0000975a,
  0x00000000,
  0x11b55cb0,
  0x09998250,
  0x0000b452,
  0x00000000,
  0x58840040,
  0x411a0a55,
  0x00004559,
  0x00000000,
  0x119d1412,
  0x0b1881f0,
  0x000094d2,
  0x00000000,
  0x30400042,
  0x40360204,
  0x00000d30,
  0x00000000,
  0x00940652,
  0x31080050,
  0x00009042,
  0x00000000,
  0x1000030a,
  0x30102200,
  0x00000410,
  0x00000000,
  0x0084c10e,
  0x01883050,
  0x00000040,
  0x00000000,
  0xd800c006,
  0x00d01803,
  0x00000418,
  0x00000000,
  0xcf033002,
  0x08408c03,
  0x0000000c,
  0x00000000,
  0x07033202,
  0xdc02c40c,
  0x00000304,
  0x00000000,
};
