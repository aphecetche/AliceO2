#include "common.h"
#include "MCHRaw/GBTEncoder.h"
#include "MCHRaw/CRUEncoder.h"
#include "MCHRaw/RAWDataHeader.h"
#include <fmt/printf.h>

namespace o2
{
namespace mch
{
namespace raw
{
namespace test
{

SampaChannelHandler handlePacketPrint(std::string_view msg)
{
  return [msg](uint8_t cruId, uint8_t linkId, uint8_t chip, uint8_t channel, SampaCluster sc) {
    std::cout << fmt::format("{}chip={:2d} ch={:2d} ", msg, chip, channel);
    std::cout << sc << "\n";
  };
}

SampaChannelHandler handlePacketStoreAsVec(std::vector<std::string>& result)
{
  return [&result](uint8_t cruId, uint8_t linkId, uint8_t chip, uint8_t channel, SampaCluster sc) {
    result.emplace_back(fmt::format("chip-{}-ch-{}-ts-{}-q-{}", chip, channel, sc.timestamp, sc.chargeSum));
  };
}

std::vector<uint32_t> createCRUBuffer(int cruId)
{
  GBTEncoder::forceNoPhase = true;
  CRUEncoder cru(cruId);

  uint32_t bx(0);
  uint8_t solarId(0);
  uint8_t elinkId(0);
  uint16_t ts(0);

  cru.startHeartbeatFrame(12345, 678);

  cru.addChannelData(solarId, elinkId, 0, {SampaCluster(ts, 10)});

  cru.startHeartbeatFrame(12345, 910);

  solarId = 1;
  elinkId = 2;
  cru.addChannelData(solarId, elinkId, 0, {SampaCluster(ts, 10)});
  solarId = 2;
  elinkId = 3;
  cru.addChannelData(solarId, elinkId, 0, {SampaCluster(ts, 10)});

  solarId = 12;
  elinkId = 3;

  cru.addChannelData(solarId, elinkId, 3, {SampaCluster(ts, 13)});
  cru.addChannelData(solarId, elinkId, 13, {SampaCluster(ts, 133)});
  cru.addChannelData(solarId, elinkId, 23, {SampaCluster(ts, 163)});

  elinkId = 2;

  cru.addChannelData(solarId, elinkId, 0, {SampaCluster(ts, 10)});
  cru.addChannelData(solarId, elinkId, 1, {SampaCluster(ts, 20)});
  cru.addChannelData(solarId, elinkId, 2, {SampaCluster(ts, 30)});
  cru.addChannelData(solarId, elinkId, 3, {SampaCluster(ts, 40)});

  elinkId = 10;

  cru.addChannelData(solarId, elinkId, 22, {SampaCluster(ts, 420)});
  cru.addChannelData(solarId, elinkId, 23, {SampaCluster(ts, 430)});
  cru.addChannelData(solarId, elinkId, 24, {SampaCluster(ts, 440)});
  cru.addChannelData(solarId, elinkId, 25, {SampaCluster(ts, 450)});
  cru.addChannelData(solarId, elinkId, 26, {SampaCluster(ts, 460)});
  cru.addChannelData(solarId, elinkId, 12, {SampaCluster(ts, 420)});

  std::vector<uint32_t> buffer;
  cru.moveToBuffer(buffer);
  return buffer;
}

ElinkEncoder createElinkEncoder10()
{
  uint8_t cruId{0};
  uint8_t linkId{0};
  int phase{0};
  bool clusterSumMode{false};

  ElinkEncoder enc(cruId, linkId, phase, clusterSumMode);

  enc.addChannelData(1, {SampaCluster{20, std::vector<uint16_t>{20}}});
  enc.addChannelData(5, {SampaCluster{100, std::vector<uint16_t>{100, 101}}});
  enc.addChannelData(13, {SampaCluster{260, std::vector<uint16_t>{260, 261, 262}}});
  enc.addChannelData(31, {SampaCluster{620, std::vector<uint16_t>{620, 621, 622, 623}}});

  return enc;
}

ElinkEncoder createElinkEncoder20()
{
  uint8_t cruId{0};
  uint8_t linkId{0};
  int phase{0};
  bool clusterSumMode{true};

  ElinkEncoder enc(cruId, linkId, phase, clusterSumMode);

  enc.addChannelData(1, {SampaCluster{20, 101}});
  enc.addChannelData(5, {SampaCluster{100, 505}});
  enc.addChannelData(13, {SampaCluster{260, 1313}});
  enc.addChannelData(31, {SampaCluster{620, 3131}});

  return enc;
}

std::vector<uint32_t> createGBTBuffer()
{
  GBTEncoder::forceNoPhase = true;
  GBTEncoder enc(0, 0);
  uint32_t bx(0);
  uint16_t ts(12);
  int elinkId = 0;
  enc.addChannelData(elinkId, 0, {SampaCluster(ts, 10)});
  enc.addChannelData(elinkId, 31, {SampaCluster(ts, 160)});
  elinkId = 3;
  enc.addChannelData(elinkId, 3, {SampaCluster(ts, 13)});
  enc.addChannelData(elinkId, 31, {SampaCluster(ts, 133)});
  enc.addChannelData(elinkId, 13, {SampaCluster(ts, 163)});
  std::vector<uint32_t> words;
  enc.moveToBuffer(words);
  // for (auto v : words) {
  //   fmt::printf("0x%08X,\n", v);
  // }
  return words;
}

// REF_BUFFER was generated using phase=0 for elinks

std::array<uint32_t, 640> REF_BUFFER = {
  0xFFFFFFFF,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFFFF,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFFFF,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000083,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000080,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA69,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000082,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFFFC,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x000000C0,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFFBE,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x000000C3,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFFBD,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFFFD,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA2B,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAE9,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA2A,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA69,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000082,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x000000C0,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x000000C3,
  0x00000000,
  0x00000000,
  0x00000000,
  0x000000C3,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000082,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x000000C3,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000080,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000080,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000001,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000041,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAEB,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAE8,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA6A,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAA8,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFFFF,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000003,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAA8,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x000000C0,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFF3E,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFF3E,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAAB,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA2A,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA2A,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAE8,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFFFF,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000003,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA68,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000040,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000};
} // namespace test
} // namespace raw
} // namespace mch
} // namespace o2
