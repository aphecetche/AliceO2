#include "common.h"
#include "MCHRaw/GBTEncoder.h"
#include "MCHRaw/CRUEncoder.h"
#include "MCHRaw/RAWDataHeader.h"
namespace o2
{
namespace mch
{
namespace raw
{
namespace test
{

SampaChannelHandler handlePacketPrint(std::string_view msg)
{
  return [msg](SampaHit sh) {
    std::cout << fmt::format("{}chip={:2d} ch={:2d} ts={:4d} q={:7d}\n",
                             msg, sh.chip, sh.channel, sh.timestamp, sh.chargeSum);
  };
}

SampaChannelHandler handlePacketStoreAsVec(std::vector<std::string>& result)
{
  return [&result](SampaHit sh) {
    result.emplace_back(fmt::format("chip-{}-ch-{}-ts-{}-q-{}", sh.chip, sh.channel, sh.timestamp, sh.chargeSum));
  };
}

std::vector<uint32_t> createCRUBuffer(int cruId)
{
  GBTEncoder::forceNoPhase = true;
  CRUEncoder cru(cruId);

  uint32_t bx(0);
  uint8_t solarId(0);
  uint8_t elinkId(0);
  uint16_t ts(0);

  cru.startHeartbeatFrame(12345, 678);

  cru.addChannelChargeSum(solarId, elinkId, ts, 0, 10);

  cru.startHeartbeatFrame(12345, 910);

  solarId = 1;
  elinkId = 2;
  cru.addChannelChargeSum(solarId, elinkId, ts, 0, 10);
  solarId = 2;
  elinkId = 3;
  cru.addChannelChargeSum(solarId, elinkId, ts, 0, 10);

  solarId = 12;
  elinkId = 3;

  cru.addChannelChargeSum(solarId, elinkId, ts, 3, 13);
  cru.addChannelChargeSum(solarId, elinkId, ts, 13, 133);
  cru.addChannelChargeSum(solarId, elinkId, ts, 23, 163);

  elinkId = 2;

  cru.addChannelChargeSum(solarId, elinkId, ts, 0, 10);
  cru.addChannelChargeSum(solarId, elinkId, ts, 1, 20);
  cru.addChannelChargeSum(solarId, elinkId, ts, 2, 30);
  cru.addChannelChargeSum(solarId, elinkId, ts, 3, 40);

  elinkId = 10;

  cru.addChannelChargeSum(solarId, elinkId, ts, 22, 420);
  cru.addChannelChargeSum(solarId, elinkId, ts, 23, 430);
  cru.addChannelChargeSum(solarId, elinkId, ts, 24, 440);
  cru.addChannelChargeSum(solarId, elinkId, ts, 25, 450);
  cru.addChannelChargeSum(solarId, elinkId, ts, 26, 460);
  cru.addChannelChargeSum(solarId, elinkId, ts, 12, 420);

  std::vector<uint32_t> buffer;
  cru.moveToBuffer(buffer);
  return buffer;
}

ElinkEncoder createElinkEncoder()
{
  ElinkEncoder enc(0, 9);

  enc.addChannelChargeSum(1, 20, 101);
  enc.addChannelChargeSum(5, 100, 505);
  enc.addChannelChargeSum(13, 260, 1313);
  enc.addChannelChargeSum(31, 620, 3131);

  return enc;
}

std::vector<uint32_t> createGBTBuffer()
{
  GBTEncoder::forceNoPhase = true;
  GBTEncoder enc(0, 0);
  uint32_t bx(0);
  uint16_t ts(12);
  int elinkId = 0;
  enc.addChannelChargeSum(elinkId, ts, 0, 10);
  enc.addChannelChargeSum(elinkId, ts, 31, 160);
  elinkId = 3;
  enc.addChannelChargeSum(elinkId, ts, 3, 13);
  enc.addChannelChargeSum(elinkId, ts, 31, 133);
  enc.addChannelChargeSum(elinkId, ts, 13, 163);
  std::vector<uint32_t> words;
  enc.moveToBuffer(words);
  return words;
}

// REF_BUFFER was generated using phase=0 for elinks
std::array<uint32_t, 640> REF_BUFFER = {
  0xFFFFFFFF,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFFFF,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFFFF,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA69,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000082,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFFFC,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x000000C0,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFFBE,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x000000C3,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFFBD,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFFFD,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA69,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000082,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x000000C0,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x000000C3,
  0x00000000,
  0x00000000,
  0x00000000,
  0x000000C3,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000082,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAAA,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x000000C3,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000080,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000080,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000001,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000041,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFF3C,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA2B,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA2A,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA6A,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAA8,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFFFF,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000003,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAA8,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x000000C0,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0xFFFFFF3E,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0xFFFFFF3E,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAAAB,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA2A,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA2A,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAAE8,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0xFFFFFFFF,
  0xFFFFFFFF,
  0x0000FFFF,
  0x00000000,
  0x00000003,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA68,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000040,
  0x00000000,
  0x00000000,
  0x00000000,
  0xAAAAAA28,
  0xAAAAAAAA,
  0x0000AAAA,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000002,
  0x00000000,
  0x00000000,
  0x00000000};

} // namespace test
} // namespace raw
} // namespace mch
} // namespace o2
